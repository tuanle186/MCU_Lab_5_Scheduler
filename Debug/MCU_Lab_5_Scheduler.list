
MCU_Lab_5_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f84  08002f84  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f84  08002f84  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f84  08002f84  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000003c  08002fc8  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002fc8  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a30d  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002033  00000000  00000000  0002a372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017393  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d888  00000000  00000000  00044cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b10  00000000  00000000  0005254b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d505b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  000d50b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f48 	.word	0x08002f48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002f48 	.word	0x08002f48

0800014c <fsm_automatic>:
#include "timer.h"
#include "input_reading.h"
#include "seven_seg.h"

int counter_1 = 0, counter_2 = 0;
void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b92      	ldr	r3, [pc, #584]	; (800039c <fsm_automatic+0x250>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 8114 	bhi.w	8000384 <fsm_automatic+0x238>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001cb 	.word	0x080001cb
 8000170:	08000237 	.word	0x08000237
 8000174:	080002a9 	.word	0x080002a9
 8000178:	08000313 	.word	0x08000313
		case INIT:
			status = MODE1;
 800017c:	4b87      	ldr	r3, [pc, #540]	; (800039c <fsm_automatic+0x250>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e108      	b.n	8000396 <fsm_automatic+0x24a>
		case MODE1:
			led_config();
 8000184:	f000 f9ee 	bl	8000564 <led_config>
			counter_1 = T_RED;
 8000188:	4b85      	ldr	r3, [pc, #532]	; (80003a0 <fsm_automatic+0x254>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a85      	ldr	r2, [pc, #532]	; (80003a4 <fsm_automatic+0x258>)
 800018e:	6013      	str	r3, [r2, #0]
			counter_2 = T_GREEN;
 8000190:	4b85      	ldr	r3, [pc, #532]	; (80003a8 <fsm_automatic+0x25c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a85      	ldr	r2, [pc, #532]	; (80003ac <fsm_automatic+0x260>)
 8000196:	6013      	str	r3, [r2, #0]
			update7SEG_buffer_auto(counter_1, counter_2);
 8000198:	4b82      	ldr	r3, [pc, #520]	; (80003a4 <fsm_automatic+0x258>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a83      	ldr	r2, [pc, #524]	; (80003ac <fsm_automatic+0x260>)
 800019e:	6812      	ldr	r2, [r2, #0]
 80001a0:	4611      	mov	r1, r2
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 f992 	bl	80014cc <update7SEG_buffer_auto>
			setTimer0(T_GREEN*1000);
 80001a8:	4b7f      	ldr	r3, [pc, #508]	; (80003a8 <fsm_automatic+0x25c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b0:	fb02 f303 	mul.w	r3, r2, r3
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fa91 	bl	80016dc <setTimer0>
			setTimer4(1000);
 80001ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001be:	f001 fadb 	bl	8001778 <setTimer4>
			status = RED_GREEN;
 80001c2:	4b76      	ldr	r3, [pc, #472]	; (800039c <fsm_automatic+0x250>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
			break;
 80001c8:	e0e5      	b.n	8000396 <fsm_automatic+0x24a>
		case RED_GREEN:
			led_config();
 80001ca:	f000 f9cb 	bl	8000564 <led_config>
			if (timer4_flag == 1) {
 80001ce:	4b78      	ldr	r3, [pc, #480]	; (80003b0 <fsm_automatic+0x264>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d11d      	bne.n	8000212 <fsm_automatic+0xc6>
				counter_1--;
 80001d6:	4b73      	ldr	r3, [pc, #460]	; (80003a4 <fsm_automatic+0x258>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	3b01      	subs	r3, #1
 80001dc:	4a71      	ldr	r2, [pc, #452]	; (80003a4 <fsm_automatic+0x258>)
 80001de:	6013      	str	r3, [r2, #0]
				counter_2--;
 80001e0:	4b72      	ldr	r3, [pc, #456]	; (80003ac <fsm_automatic+0x260>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a71      	ldr	r2, [pc, #452]	; (80003ac <fsm_automatic+0x260>)
 80001e8:	6013      	str	r3, [r2, #0]
				if (counter_2 <= 0) counter_2 = T_AMBER;
 80001ea:	4b70      	ldr	r3, [pc, #448]	; (80003ac <fsm_automatic+0x260>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	dc03      	bgt.n	80001fa <fsm_automatic+0xae>
 80001f2:	4b70      	ldr	r3, [pc, #448]	; (80003b4 <fsm_automatic+0x268>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a6d      	ldr	r2, [pc, #436]	; (80003ac <fsm_automatic+0x260>)
 80001f8:	6013      	str	r3, [r2, #0]
				update7SEG_buffer_auto(counter_1, counter_2);
 80001fa:	4b6a      	ldr	r3, [pc, #424]	; (80003a4 <fsm_automatic+0x258>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a6b      	ldr	r2, [pc, #428]	; (80003ac <fsm_automatic+0x260>)
 8000200:	6812      	ldr	r2, [r2, #0]
 8000202:	4611      	mov	r1, r2
 8000204:	4618      	mov	r0, r3
 8000206:	f001 f961 	bl	80014cc <update7SEG_buffer_auto>
				setTimer4(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f001 fab3 	bl	8001778 <setTimer4>
			}
			if (timer0_flag == 1) {
 8000212:	4b69      	ldr	r3, [pc, #420]	; (80003b8 <fsm_automatic+0x26c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b01      	cmp	r3, #1
 8000218:	f040 80b6 	bne.w	8000388 <fsm_automatic+0x23c>
				setTimer0(T_AMBER*1000);
 800021c:	4b65      	ldr	r3, [pc, #404]	; (80003b4 <fsm_automatic+0x268>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000224:	fb02 f303 	mul.w	r3, r2, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fa57 	bl	80016dc <setTimer0>
				status = RED_AMBER;
 800022e:	4b5b      	ldr	r3, [pc, #364]	; (800039c <fsm_automatic+0x250>)
 8000230:	2202      	movs	r2, #2
 8000232:	601a      	str	r2, [r3, #0]
			}
			break;
 8000234:	e0a8      	b.n	8000388 <fsm_automatic+0x23c>
		case RED_AMBER:
			led_config();
 8000236:	f000 f995 	bl	8000564 <led_config>
			if (timer4_flag == 1) {
 800023a:	4b5d      	ldr	r3, [pc, #372]	; (80003b0 <fsm_automatic+0x264>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d121      	bne.n	8000286 <fsm_automatic+0x13a>
				counter_1--;
 8000242:	4b58      	ldr	r3, [pc, #352]	; (80003a4 <fsm_automatic+0x258>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	3b01      	subs	r3, #1
 8000248:	4a56      	ldr	r2, [pc, #344]	; (80003a4 <fsm_automatic+0x258>)
 800024a:	6013      	str	r3, [r2, #0]
				counter_2--;
 800024c:	4b57      	ldr	r3, [pc, #348]	; (80003ac <fsm_automatic+0x260>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a56      	ldr	r2, [pc, #344]	; (80003ac <fsm_automatic+0x260>)
 8000254:	6013      	str	r3, [r2, #0]
				if (counter_1 <= 0) {
 8000256:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <fsm_automatic+0x258>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dc07      	bgt.n	800026e <fsm_automatic+0x122>
					counter_1 = T_GREEN;
 800025e:	4b52      	ldr	r3, [pc, #328]	; (80003a8 <fsm_automatic+0x25c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a50      	ldr	r2, [pc, #320]	; (80003a4 <fsm_automatic+0x258>)
 8000264:	6013      	str	r3, [r2, #0]
					counter_2 = T_RED;
 8000266:	4b4e      	ldr	r3, [pc, #312]	; (80003a0 <fsm_automatic+0x254>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a50      	ldr	r2, [pc, #320]	; (80003ac <fsm_automatic+0x260>)
 800026c:	6013      	str	r3, [r2, #0]
				}
				update7SEG_buffer_auto(counter_1, counter_2);
 800026e:	4b4d      	ldr	r3, [pc, #308]	; (80003a4 <fsm_automatic+0x258>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <fsm_automatic+0x260>)
 8000274:	6812      	ldr	r2, [r2, #0]
 8000276:	4611      	mov	r1, r2
 8000278:	4618      	mov	r0, r3
 800027a:	f001 f927 	bl	80014cc <update7SEG_buffer_auto>
				setTimer4(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000282:	f001 fa79 	bl	8001778 <setTimer4>
			}
			if (timer0_flag == 1) {
 8000286:	4b4c      	ldr	r3, [pc, #304]	; (80003b8 <fsm_automatic+0x26c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d17e      	bne.n	800038c <fsm_automatic+0x240>
				setTimer0(T_GREEN*1000);
 800028e:	4b46      	ldr	r3, [pc, #280]	; (80003a8 <fsm_automatic+0x25c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000296:	fb02 f303 	mul.w	r3, r2, r3
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fa1e 	bl	80016dc <setTimer0>
				status = GREEN_RED;
 80002a0:	4b3e      	ldr	r3, [pc, #248]	; (800039c <fsm_automatic+0x250>)
 80002a2:	2203      	movs	r2, #3
 80002a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80002a6:	e071      	b.n	800038c <fsm_automatic+0x240>
		case GREEN_RED:
			led_config();
 80002a8:	f000 f95c 	bl	8000564 <led_config>
			if (timer4_flag == 1) {
 80002ac:	4b40      	ldr	r3, [pc, #256]	; (80003b0 <fsm_automatic+0x264>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d11d      	bne.n	80002f0 <fsm_automatic+0x1a4>
				counter_1--;
 80002b4:	4b3b      	ldr	r3, [pc, #236]	; (80003a4 <fsm_automatic+0x258>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	4a3a      	ldr	r2, [pc, #232]	; (80003a4 <fsm_automatic+0x258>)
 80002bc:	6013      	str	r3, [r2, #0]
				counter_2--;
 80002be:	4b3b      	ldr	r3, [pc, #236]	; (80003ac <fsm_automatic+0x260>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	3b01      	subs	r3, #1
 80002c4:	4a39      	ldr	r2, [pc, #228]	; (80003ac <fsm_automatic+0x260>)
 80002c6:	6013      	str	r3, [r2, #0]
				if (counter_1 <= 0) counter_1 = T_AMBER;
 80002c8:	4b36      	ldr	r3, [pc, #216]	; (80003a4 <fsm_automatic+0x258>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	dc03      	bgt.n	80002d8 <fsm_automatic+0x18c>
 80002d0:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <fsm_automatic+0x268>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a33      	ldr	r2, [pc, #204]	; (80003a4 <fsm_automatic+0x258>)
 80002d6:	6013      	str	r3, [r2, #0]
				update7SEG_buffer_auto(counter_1, counter_2);
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <fsm_automatic+0x258>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <fsm_automatic+0x260>)
 80002de:	6812      	ldr	r2, [r2, #0]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f8f2 	bl	80014cc <update7SEG_buffer_auto>
				setTimer4(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ec:	f001 fa44 	bl	8001778 <setTimer4>
			}
			if (timer0_flag == 1) {
 80002f0:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <fsm_automatic+0x26c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d14b      	bne.n	8000390 <fsm_automatic+0x244>
				setTimer0(T_AMBER*1000);
 80002f8:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <fsm_automatic+0x268>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f9e9 	bl	80016dc <setTimer0>
				status = AMBER_RED;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <fsm_automatic+0x250>)
 800030c:	2204      	movs	r2, #4
 800030e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000310:	e03e      	b.n	8000390 <fsm_automatic+0x244>
		case AMBER_RED:
			led_config();
 8000312:	f000 f927 	bl	8000564 <led_config>
			if (timer4_flag == 1) {
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <fsm_automatic+0x264>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d121      	bne.n	8000362 <fsm_automatic+0x216>
				counter_1--;
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <fsm_automatic+0x258>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3b01      	subs	r3, #1
 8000324:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <fsm_automatic+0x258>)
 8000326:	6013      	str	r3, [r2, #0]
				counter_2--;
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <fsm_automatic+0x260>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3b01      	subs	r3, #1
 800032e:	4a1f      	ldr	r2, [pc, #124]	; (80003ac <fsm_automatic+0x260>)
 8000330:	6013      	str	r3, [r2, #0]
				if (counter_1 <= 0) {
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <fsm_automatic+0x258>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	dc07      	bgt.n	800034a <fsm_automatic+0x1fe>
					counter_1 = T_RED;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <fsm_automatic+0x254>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <fsm_automatic+0x258>)
 8000340:	6013      	str	r3, [r2, #0]
					counter_2 = T_GREEN;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <fsm_automatic+0x25c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <fsm_automatic+0x260>)
 8000348:	6013      	str	r3, [r2, #0]
				}
				update7SEG_buffer_auto(counter_1, counter_2);
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <fsm_automatic+0x258>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <fsm_automatic+0x260>)
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	4611      	mov	r1, r2
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f8b9 	bl	80014cc <update7SEG_buffer_auto>
				setTimer4(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f001 fa0b 	bl	8001778 <setTimer4>
			}
			if (timer0_flag == 1) {
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <fsm_automatic+0x26c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d114      	bne.n	8000394 <fsm_automatic+0x248>
				setTimer0(T_GREEN*1000);
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <fsm_automatic+0x25c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000372:	fb02 f303 	mul.w	r3, r2, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f001 f9b0 	bl	80016dc <setTimer0>
				status = RED_GREEN;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <fsm_automatic+0x250>)
 800037e:	2201      	movs	r2, #1
 8000380:	601a      	str	r2, [r3, #0]
			}
			break;
 8000382:	e007      	b.n	8000394 <fsm_automatic+0x248>
		default:
			break;
 8000384:	bf00      	nop
 8000386:	e006      	b.n	8000396 <fsm_automatic+0x24a>
			break;
 8000388:	bf00      	nop
 800038a:	e004      	b.n	8000396 <fsm_automatic+0x24a>
			break;
 800038c:	bf00      	nop
 800038e:	e002      	b.n	8000396 <fsm_automatic+0x24a>
			break;
 8000390:	bf00      	nop
 8000392:	e000      	b.n	8000396 <fsm_automatic+0x24a>
			break;
 8000394:	bf00      	nop
	}
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000000c 	.word	0x2000000c
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000058 	.word	0x20000058
 80003a8:	20000008 	.word	0x20000008
 80003ac:	2000005c 	.word	0x2000005c
 80003b0:	20000148 	.word	0x20000148
 80003b4:	20000004 	.word	0x20000004
 80003b8:	20000138 	.word	0x20000138

080003bc <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
#include "seven_seg.h"

void fsm_red_manual() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	switch(status) {
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <fsm_red_manual+0x7c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d023      	beq.n	8000410 <fsm_red_manual+0x54>
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	dc2e      	bgt.n	800042a <fsm_red_manual+0x6e>
 80003cc:	2b05      	cmp	r3, #5
 80003ce:	d002      	beq.n	80003d6 <fsm_red_manual+0x1a>
 80003d0:	2b06      	cmp	r3, #6
 80003d2:	d010      	beq.n	80003f6 <fsm_red_manual+0x3a>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 80003d4:	e029      	b.n	800042a <fsm_red_manual+0x6e>
			led_config();
 80003d6:	f000 f8c5 	bl	8000564 <led_config>
			setTimer1(500);
 80003da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003de:	f001 f997 	bl	8001710 <setTimer1>
			update7SEG_buffer_manual(2, T_RED);
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <fsm_red_manual+0x80>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2002      	movs	r0, #2
 80003ea:	f001 f8a3 	bl	8001534 <update7SEG_buffer_manual>
			status = AUTO_RED;
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <fsm_red_manual+0x7c>)
 80003f0:	2206      	movs	r2, #6
 80003f2:	601a      	str	r2, [r3, #0]
			break;
 80003f4:	e01e      	b.n	8000434 <fsm_red_manual+0x78>
			if (timer1_flag == 1) {
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <fsm_red_manual+0x84>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d117      	bne.n	800042e <fsm_red_manual+0x72>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
 80003fe:	2148      	movs	r1, #72	; 0x48
 8000400:	4810      	ldr	r0, [pc, #64]	; (8000444 <fsm_red_manual+0x88>)
 8000402:	f001 fd7c 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040a:	f001 f981 	bl	8001710 <setTimer1>
			break;
 800040e:	e00e      	b.n	800042e <fsm_red_manual+0x72>
			if (timer1_flag == 1) {
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <fsm_red_manual+0x84>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d10c      	bne.n	8000432 <fsm_red_manual+0x76>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
 8000418:	2148      	movs	r1, #72	; 0x48
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <fsm_red_manual+0x88>)
 800041c:	f001 fd6f 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000424:	f001 f974 	bl	8001710 <setTimer1>
			break;
 8000428:	e003      	b.n	8000432 <fsm_red_manual+0x76>
			break;
 800042a:	bf00      	nop
 800042c:	e002      	b.n	8000434 <fsm_red_manual+0x78>
			break;
 800042e:	bf00      	nop
 8000430:	e000      	b.n	8000434 <fsm_red_manual+0x78>
			break;
 8000432:	bf00      	nop
	}
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000000c 	.word	0x2000000c
 800043c:	20000000 	.word	0x20000000
 8000440:	2000013c 	.word	0x2000013c
 8000444:	40010c00 	.word	0x40010c00

08000448 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	switch(status) {
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <fsm_amber_manual+0x7c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b0a      	cmp	r3, #10
 8000452:	d023      	beq.n	800049c <fsm_amber_manual+0x54>
 8000454:	2b0a      	cmp	r3, #10
 8000456:	dc2e      	bgt.n	80004b6 <fsm_amber_manual+0x6e>
 8000458:	2b08      	cmp	r3, #8
 800045a:	d002      	beq.n	8000462 <fsm_amber_manual+0x1a>
 800045c:	2b09      	cmp	r3, #9
 800045e:	d010      	beq.n	8000482 <fsm_amber_manual+0x3a>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 8000460:	e029      	b.n	80004b6 <fsm_amber_manual+0x6e>
			led_config();
 8000462:	f000 f87f 	bl	8000564 <led_config>
			setTimer1(500);
 8000466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046a:	f001 f951 	bl	8001710 <setTimer1>
			update7SEG_buffer_manual(3, T_AMBER);
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <fsm_amber_manual+0x80>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4619      	mov	r1, r3
 8000474:	2003      	movs	r0, #3
 8000476:	f001 f85d 	bl	8001534 <update7SEG_buffer_manual>
			status = AUTO_AMBER;
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <fsm_amber_manual+0x7c>)
 800047c:	2209      	movs	r2, #9
 800047e:	601a      	str	r2, [r3, #0]
			break;
 8000480:	e01e      	b.n	80004c0 <fsm_amber_manual+0x78>
			if (timer1_flag == 1) {
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <fsm_amber_manual+0x84>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d117      	bne.n	80004ba <fsm_amber_manual+0x72>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
 800048a:	2190      	movs	r1, #144	; 0x90
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <fsm_amber_manual+0x88>)
 800048e:	f001 fd36 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000496:	f001 f93b 	bl	8001710 <setTimer1>
			break;
 800049a:	e00e      	b.n	80004ba <fsm_amber_manual+0x72>
			if (timer1_flag == 1) {
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <fsm_amber_manual+0x84>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d10c      	bne.n	80004be <fsm_amber_manual+0x76>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
 80004a4:	2190      	movs	r1, #144	; 0x90
 80004a6:	480a      	ldr	r0, [pc, #40]	; (80004d0 <fsm_amber_manual+0x88>)
 80004a8:	f001 fd29 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 80004ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b0:	f001 f92e 	bl	8001710 <setTimer1>
			break;
 80004b4:	e003      	b.n	80004be <fsm_amber_manual+0x76>
			break;
 80004b6:	bf00      	nop
 80004b8:	e002      	b.n	80004c0 <fsm_amber_manual+0x78>
			break;
 80004ba:	bf00      	nop
 80004bc:	e000      	b.n	80004c0 <fsm_amber_manual+0x78>
			break;
 80004be:	bf00      	nop
	}
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000000c 	.word	0x2000000c
 80004c8:	20000004 	.word	0x20000004
 80004cc:	2000013c 	.word	0x2000013c
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <fsm_green_manual>:

void fsm_green_manual() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	switch(status) {
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <fsm_green_manual+0x80>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b0d      	cmp	r3, #13
 80004de:	d024      	beq.n	800052a <fsm_green_manual+0x56>
 80004e0:	2b0d      	cmp	r3, #13
 80004e2:	dc30      	bgt.n	8000546 <fsm_green_manual+0x72>
 80004e4:	2b0b      	cmp	r3, #11
 80004e6:	d002      	beq.n	80004ee <fsm_green_manual+0x1a>
 80004e8:	2b0c      	cmp	r3, #12
 80004ea:	d010      	beq.n	800050e <fsm_green_manual+0x3a>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 80004ec:	e02b      	b.n	8000546 <fsm_green_manual+0x72>
			led_config();
 80004ee:	f000 f839 	bl	8000564 <led_config>
			setTimer1(500);
 80004f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f6:	f001 f90b 	bl	8001710 <setTimer1>
			update7SEG_buffer_manual(4, T_GREEN);
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <fsm_green_manual+0x84>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4619      	mov	r1, r3
 8000500:	2004      	movs	r0, #4
 8000502:	f001 f817 	bl	8001534 <update7SEG_buffer_manual>
			status = AUTO_GREEN;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <fsm_green_manual+0x80>)
 8000508:	220c      	movs	r2, #12
 800050a:	601a      	str	r2, [r3, #0]
			break;
 800050c:	e020      	b.n	8000550 <fsm_green_manual+0x7c>
			if (timer1_flag == 1) {
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <fsm_green_manual+0x88>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d119      	bne.n	800054a <fsm_green_manual+0x76>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
 8000516:	f44f 7190 	mov.w	r1, #288	; 0x120
 800051a:	4811      	ldr	r0, [pc, #68]	; (8000560 <fsm_green_manual+0x8c>)
 800051c:	f001 fcef 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000524:	f001 f8f4 	bl	8001710 <setTimer1>
			break;
 8000528:	e00f      	b.n	800054a <fsm_green_manual+0x76>
			if (timer1_flag == 1) {
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <fsm_green_manual+0x88>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10d      	bne.n	800054e <fsm_green_manual+0x7a>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
 8000532:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <fsm_green_manual+0x8c>)
 8000538:	f001 fce1 	bl	8001efe <HAL_GPIO_TogglePin>
				setTimer1(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000540:	f001 f8e6 	bl	8001710 <setTimer1>
			break;
 8000544:	e003      	b.n	800054e <fsm_green_manual+0x7a>
			break;
 8000546:	bf00      	nop
 8000548:	e002      	b.n	8000550 <fsm_green_manual+0x7c>
			break;
 800054a:	bf00      	nop
 800054c:	e000      	b.n	8000550 <fsm_green_manual+0x7c>
			break;
 800054e:	bf00      	nop
	}
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000000c 	.word	0x2000000c
 8000558:	20000008 	.word	0x20000008
 800055c:	2000013c 	.word	0x2000013c
 8000560:	40010c00 	.word	0x40010c00

08000564 <led_config>:
int T_AMBER = 2;
int T_GREEN = 3;

int status = INIT;

void led_config() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	switch (status) {
 8000568:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <led_config+0xfc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b0b      	cmp	r3, #11
 800056e:	d874      	bhi.n	800065a <led_config+0xf6>
 8000570:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <led_config+0x14>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	080005a9 	.word	0x080005a9
 800057c:	080005b7 	.word	0x080005b7
 8000580:	080005cf 	.word	0x080005cf
 8000584:	080005e7 	.word	0x080005e7
 8000588:	080005fd 	.word	0x080005fd
 800058c:	08000613 	.word	0x08000613
 8000590:	0800065b 	.word	0x0800065b
 8000594:	0800065b 	.word	0x0800065b
 8000598:	0800062b 	.word	0x0800062b
 800059c:	0800065b 	.word	0x0800065b
 80005a0:	0800065b 	.word	0x0800065b
 80005a4:	08000643 	.word	0x08000643
		case MODE1:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | amber_1_Pin | amber_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80005ae:	482d      	ldr	r0, [pc, #180]	; (8000664 <led_config+0x100>)
 80005b0:	f001 fc8d 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80005b4:	e052      	b.n	800065c <led_config+0xf8>
		case RED_GREEN:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | green_2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80005bc:	4829      	ldr	r0, [pc, #164]	; (8000664 <led_config+0x100>)
 80005be:	f001 fc86 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | red_2_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2150      	movs	r1, #80	; 0x50
 80005c6:	4827      	ldr	r0, [pc, #156]	; (8000664 <led_config+0x100>)
 80005c8:	f001 fc81 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80005cc:	e046      	b.n	800065c <led_config+0xf8>
		case RED_AMBER:
			HAL_GPIO_WritePin(GPIOB, green_2_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	4823      	ldr	r0, [pc, #140]	; (8000664 <led_config+0x100>)
 80005d6:	f001 fc7a 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_2_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	4821      	ldr	r0, [pc, #132]	; (8000664 <led_config+0x100>)
 80005e0:	f001 fc75 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80005e4:	e03a      	b.n	800065c <led_config+0xf8>
		case GREEN_RED:
			HAL_GPIO_WritePin(GPIOB, green_1_Pin | red_2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2160      	movs	r1, #96	; 0x60
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <led_config+0x100>)
 80005ec:	f001 fc6f 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | amber_2_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2188      	movs	r1, #136	; 0x88
 80005f4:	481b      	ldr	r0, [pc, #108]	; (8000664 <led_config+0x100>)
 80005f6:	f001 fc6a 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80005fa:	e02f      	b.n	800065c <led_config+0xf8>
		case AMBER_RED:
			HAL_GPIO_WritePin(GPIOB, green_1_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2120      	movs	r1, #32
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <led_config+0x100>)
 8000602:	f001 fc64 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <led_config+0x100>)
 800060c:	f001 fc5f 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8000610:	e024      	b.n	800065c <led_config+0xf8>
		case MODE2:
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | amber_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <led_config+0x100>)
 800061a:	f001 fc58 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2148      	movs	r1, #72	; 0x48
 8000622:	4810      	ldr	r0, [pc, #64]	; (8000664 <led_config+0x100>)
 8000624:	f001 fc53 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8000628:	e018      	b.n	800065c <led_config+0xf8>
		case MODE3:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <led_config+0x100>)
 8000632:	f001 fc4c 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | amber_2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2190      	movs	r1, #144	; 0x90
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <led_config+0x100>)
 800063c:	f001 fc47 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8000640:	e00c      	b.n	800065c <led_config+0xf8>
		case MODE4:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | amber_1_Pin | amber_2_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	21d8      	movs	r1, #216	; 0xd8
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <led_config+0x100>)
 8000648:	f001 fc41 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green_1_Pin | green_2_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <led_config+0x100>)
 8000654:	f001 fc3b 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8000658:	e000      	b.n	800065c <led_config+0xf8>
		default:
			break;
 800065a:	bf00      	nop
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000000c 	.word	0x2000000c
 8000664:	40010c00 	.word	0x40010c00

08000668 <fsm_button_processing>:
enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	switch (button_1_state) {
 800066c:	4b78      	ldr	r3, [pc, #480]	; (8000850 <fsm_button_processing+0x1e8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d040      	beq.n	80006f6 <fsm_button_processing+0x8e>
 8000674:	2b02      	cmp	r3, #2
 8000676:	dc4d      	bgt.n	8000714 <fsm_button_processing+0xac>
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <fsm_button_processing+0x1a>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d026      	beq.n	80006ce <fsm_button_processing+0x66>
 8000680:	e048      	b.n	8000714 <fsm_button_processing+0xac>
		case BUTTON_RELEASED:
			if (is_button_pressed(0)) {
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f9ea 	bl	8000a5c <is_button_pressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d03d      	beq.n	800070a <fsm_button_processing+0xa2>
				button_1_state = BUTTON_PRESSED;
 800068e:	4b70      	ldr	r3, [pc, #448]	; (8000850 <fsm_button_processing+0x1e8>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN) 	status = MODE2;
 8000694:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <fsm_button_processing+0x1ec>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d102      	bne.n	80006a2 <fsm_button_processing+0x3a>
 800069c:	4b6d      	ldr	r3, [pc, #436]	; (8000854 <fsm_button_processing+0x1ec>)
 800069e:	2205      	movs	r2, #5
 80006a0:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 80006a2:	4b6c      	ldr	r3, [pc, #432]	; (8000854 <fsm_button_processing+0x1ec>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d102      	bne.n	80006b0 <fsm_button_processing+0x48>
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <fsm_button_processing+0x1ec>)
 80006ac:	2208      	movs	r2, #8
 80006ae:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 80006b0:	4b68      	ldr	r3, [pc, #416]	; (8000854 <fsm_button_processing+0x1ec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	d102      	bne.n	80006be <fsm_button_processing+0x56>
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <fsm_button_processing+0x1ec>)
 80006ba:	220b      	movs	r2, #11
 80006bc:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 80006be:	4b65      	ldr	r3, [pc, #404]	; (8000854 <fsm_button_processing+0x1ec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b0c      	cmp	r3, #12
 80006c4:	d121      	bne.n	800070a <fsm_button_processing+0xa2>
 80006c6:	4b63      	ldr	r3, [pc, #396]	; (8000854 <fsm_button_processing+0x1ec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
			}
			break;
 80006cc:	e01d      	b.n	800070a <fsm_button_processing+0xa2>
		case BUTTON_PRESSED:
			if (!is_button_pressed(0)) {
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f9c4 	bl	8000a5c <is_button_pressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <fsm_button_processing+0x7a>
				button_1_state = BUTTON_RELEASED;
 80006da:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <fsm_button_processing+0x1e8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(0)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 80006e0:	e015      	b.n	800070e <fsm_button_processing+0xa6>
				if (is_button_pressed_1s(0)) {
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f9d4 	bl	8000a90 <is_button_pressed_1s>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00f      	beq.n	800070e <fsm_button_processing+0xa6>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80006ee:	4b58      	ldr	r3, [pc, #352]	; (8000850 <fsm_button_processing+0x1e8>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	701a      	strb	r2, [r3, #0]
			break;
 80006f4:	e00b      	b.n	800070e <fsm_button_processing+0xa6>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(0)) {
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f9b0 	bl	8000a5c <is_button_pressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d107      	bne.n	8000712 <fsm_button_processing+0xaa>
				button_1_state = BUTTON_RELEASED;
 8000702:	4b53      	ldr	r3, [pc, #332]	; (8000850 <fsm_button_processing+0x1e8>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000708:	e003      	b.n	8000712 <fsm_button_processing+0xaa>
			break;
 800070a:	bf00      	nop
 800070c:	e002      	b.n	8000714 <fsm_button_processing+0xac>
			break;
 800070e:	bf00      	nop
 8000710:	e000      	b.n	8000714 <fsm_button_processing+0xac>
			break;
 8000712:	bf00      	nop
	}

	switch (button_2_state) {
 8000714:	4b50      	ldr	r3, [pc, #320]	; (8000858 <fsm_button_processing+0x1f0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d07c      	beq.n	8000816 <fsm_button_processing+0x1ae>
 800071c:	2b02      	cmp	r3, #2
 800071e:	f300 8089 	bgt.w	8000834 <fsm_button_processing+0x1cc>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <fsm_button_processing+0xc4>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d061      	beq.n	80007ee <fsm_button_processing+0x186>
 800072a:	e083      	b.n	8000834 <fsm_button_processing+0x1cc>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 800072c:	2001      	movs	r0, #1
 800072e:	f000 f995 	bl	8000a5c <is_button_pressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d078      	beq.n	800082a <fsm_button_processing+0x1c2>
				button_2_state = BUTTON_PRESSED;
 8000738:	4b47      	ldr	r3, [pc, #284]	; (8000858 <fsm_button_processing+0x1f0>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 800073e:	4b45      	ldr	r3, [pc, #276]	; (8000854 <fsm_button_processing+0x1ec>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b06      	cmp	r3, #6
 8000744:	d003      	beq.n	800074e <fsm_button_processing+0xe6>
 8000746:	4b43      	ldr	r3, [pc, #268]	; (8000854 <fsm_button_processing+0x1ec>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b07      	cmp	r3, #7
 800074c:	d114      	bne.n	8000778 <fsm_button_processing+0x110>
					status = ADJ_RED;
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <fsm_button_processing+0x1ec>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <fsm_button_processing+0x1f4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a40      	ldr	r2, [pc, #256]	; (800085c <fsm_button_processing+0x1f4>)
 800075c:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 800075e:	4b3f      	ldr	r3, [pc, #252]	; (800085c <fsm_button_processing+0x1f4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b62      	cmp	r3, #98	; 0x62
 8000764:	dd02      	ble.n	800076c <fsm_button_processing+0x104>
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <fsm_button_processing+0x1f4>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
					update7SEG_buffer_manual(2, T_RED);
 800076c:	4b3b      	ldr	r3, [pc, #236]	; (800085c <fsm_button_processing+0x1f4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fede 	bl	8001534 <update7SEG_buffer_manual>
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000778:	4b36      	ldr	r3, [pc, #216]	; (8000854 <fsm_button_processing+0x1ec>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b09      	cmp	r3, #9
 800077e:	d003      	beq.n	8000788 <fsm_button_processing+0x120>
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <fsm_button_processing+0x1ec>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d114      	bne.n	80007b2 <fsm_button_processing+0x14a>
					status = ADJ_AMBER;
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <fsm_button_processing+0x1ec>)
 800078a:	220a      	movs	r2, #10
 800078c:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <fsm_button_processing+0x1f8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a32      	ldr	r2, [pc, #200]	; (8000860 <fsm_button_processing+0x1f8>)
 8000796:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <fsm_button_processing+0x1f8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b04      	cmp	r3, #4
 800079e:	dd02      	ble.n	80007a6 <fsm_button_processing+0x13e>
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <fsm_button_processing+0x1f8>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
					update7SEG_buffer_manual(3, T_AMBER);
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <fsm_button_processing+0x1f8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 fec1 	bl	8001534 <update7SEG_buffer_manual>
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <fsm_button_processing+0x1ec>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b0c      	cmp	r3, #12
 80007b8:	d003      	beq.n	80007c2 <fsm_button_processing+0x15a>
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <fsm_button_processing+0x1ec>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b0d      	cmp	r3, #13
 80007c0:	d133      	bne.n	800082a <fsm_button_processing+0x1c2>
					status = ADJ_GREEN;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <fsm_button_processing+0x1ec>)
 80007c4:	220d      	movs	r2, #13
 80007c6:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <fsm_button_processing+0x1fc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a25      	ldr	r2, [pc, #148]	; (8000864 <fsm_button_processing+0x1fc>)
 80007d0:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <fsm_button_processing+0x1fc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b62      	cmp	r3, #98	; 0x62
 80007d8:	dd02      	ble.n	80007e0 <fsm_button_processing+0x178>
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <fsm_button_processing+0x1fc>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
					update7SEG_buffer_manual(4, T_GREEN);
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <fsm_button_processing+0x1fc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	2004      	movs	r0, #4
 80007e8:	f000 fea4 	bl	8001534 <update7SEG_buffer_manual>
				}
			}
			break;
 80007ec:	e01d      	b.n	800082a <fsm_button_processing+0x1c2>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 f934 	bl	8000a5c <is_button_pressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <fsm_button_processing+0x19a>
				button_2_state = BUTTON_RELEASED;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <fsm_button_processing+0x1f0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000800:	e015      	b.n	800082e <fsm_button_processing+0x1c6>
				if (is_button_pressed_1s(1)) {
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f944 	bl	8000a90 <is_button_pressed_1s>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00f      	beq.n	800082e <fsm_button_processing+0x1c6>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <fsm_button_processing+0x1f0>)
 8000810:	2202      	movs	r2, #2
 8000812:	701a      	strb	r2, [r3, #0]
			break;
 8000814:	e00b      	b.n	800082e <fsm_button_processing+0x1c6>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f920 	bl	8000a5c <is_button_pressed>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d107      	bne.n	8000832 <fsm_button_processing+0x1ca>
				button_2_state = BUTTON_RELEASED;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <fsm_button_processing+0x1f0>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000828:	e003      	b.n	8000832 <fsm_button_processing+0x1ca>
			break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <fsm_button_processing+0x1cc>
			break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <fsm_button_processing+0x1cc>
			break;
 8000832:	bf00      	nop
	}

	switch (button_3_state) {
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <fsm_button_processing+0x200>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	f000 8082 	beq.w	8000942 <fsm_button_processing+0x2da>
 800083e:	2b02      	cmp	r3, #2
 8000840:	f300 808e 	bgt.w	8000960 <fsm_button_processing+0x2f8>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d011      	beq.n	800086c <fsm_button_processing+0x204>
 8000848:	2b01      	cmp	r3, #1
 800084a:	d066      	beq.n	800091a <fsm_button_processing+0x2b2>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 800084c:	e088      	b.n	8000960 <fsm_button_processing+0x2f8>
 800084e:	bf00      	nop
 8000850:	20000010 	.word	0x20000010
 8000854:	2000000c 	.word	0x2000000c
 8000858:	20000011 	.word	0x20000011
 800085c:	20000000 	.word	0x20000000
 8000860:	20000004 	.word	0x20000004
 8000864:	20000008 	.word	0x20000008
 8000868:	20000012 	.word	0x20000012
			if (is_button_pressed(2)) {
 800086c:	2002      	movs	r0, #2
 800086e:	f000 f8f5 	bl	8000a5c <is_button_pressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d06e      	beq.n	8000956 <fsm_button_processing+0x2ee>
				button_3_state = BUTTON_PRESSED;
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <fsm_button_processing+0x2fc>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <fsm_button_processing+0x300>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b07      	cmp	r3, #7
 8000884:	d114      	bne.n	80008b0 <fsm_button_processing+0x248>
					status = AUTO_RED;
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <fsm_button_processing+0x300>)
 8000888:	2206      	movs	r2, #6
 800088a:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <fsm_button_processing+0x304>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b37      	ldr	r3, [pc, #220]	; (8000970 <fsm_button_processing+0x308>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	dc04      	bgt.n	80008a2 <fsm_button_processing+0x23a>
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <fsm_button_processing+0x308>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a33      	ldr	r2, [pc, #204]	; (800096c <fsm_button_processing+0x304>)
 80008a0:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <fsm_button_processing+0x304>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b32      	ldr	r3, [pc, #200]	; (8000970 <fsm_button_processing+0x308>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a31      	ldr	r2, [pc, #196]	; (8000974 <fsm_button_processing+0x30c>)
 80008ae:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <fsm_button_processing+0x300>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b0a      	cmp	r3, #10
 80008b6:	d114      	bne.n	80008e2 <fsm_button_processing+0x27a>
					status = AUTO_AMBER;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <fsm_button_processing+0x300>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <fsm_button_processing+0x304>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <fsm_button_processing+0x308>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dc04      	bgt.n	80008d4 <fsm_button_processing+0x26c>
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <fsm_button_processing+0x308>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <fsm_button_processing+0x304>)
 80008d2:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <fsm_button_processing+0x304>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <fsm_button_processing+0x308>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4a25      	ldr	r2, [pc, #148]	; (8000974 <fsm_button_processing+0x30c>)
 80008e0:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <fsm_button_processing+0x300>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b0d      	cmp	r3, #13
 80008e8:	d135      	bne.n	8000956 <fsm_button_processing+0x2ee>
					status = AUTO_GREEN;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <fsm_button_processing+0x300>)
 80008ec:	220c      	movs	r2, #12
 80008ee:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <fsm_button_processing+0x308>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <fsm_button_processing+0x30c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	2b62      	cmp	r3, #98	; 0x62
 80008fc:	dd05      	ble.n	800090a <fsm_button_processing+0x2a2>
						T_AMBER = 4;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <fsm_button_processing+0x308>)
 8000900:	2204      	movs	r2, #4
 8000902:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <fsm_button_processing+0x30c>)
 8000906:	225f      	movs	r2, #95	; 0x5f
 8000908:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <fsm_button_processing+0x308>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <fsm_button_processing+0x30c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <fsm_button_processing+0x304>)
 8000916:	6013      	str	r3, [r2, #0]
			break;
 8000918:	e01d      	b.n	8000956 <fsm_button_processing+0x2ee>
			if (!is_button_pressed(2)) {
 800091a:	2002      	movs	r0, #2
 800091c:	f000 f89e 	bl	8000a5c <is_button_pressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <fsm_button_processing+0x2c6>
				button_3_state = BUTTON_RELEASED;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <fsm_button_processing+0x2fc>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
			break;
 800092c:	e015      	b.n	800095a <fsm_button_processing+0x2f2>
				if (is_button_pressed_1s(2)) {
 800092e:	2002      	movs	r0, #2
 8000930:	f000 f8ae 	bl	8000a90 <is_button_pressed_1s>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00f      	beq.n	800095a <fsm_button_processing+0x2f2>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <fsm_button_processing+0x2fc>)
 800093c:	2202      	movs	r2, #2
 800093e:	701a      	strb	r2, [r3, #0]
			break;
 8000940:	e00b      	b.n	800095a <fsm_button_processing+0x2f2>
			if (!is_button_pressed(2)) {
 8000942:	2002      	movs	r0, #2
 8000944:	f000 f88a 	bl	8000a5c <is_button_pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <fsm_button_processing+0x2f6>
				button_3_state = BUTTON_RELEASED;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <fsm_button_processing+0x2fc>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
			break;
 8000954:	e003      	b.n	800095e <fsm_button_processing+0x2f6>
			break;
 8000956:	bf00      	nop
 8000958:	e002      	b.n	8000960 <fsm_button_processing+0x2f8>
			break;
 800095a:	bf00      	nop
 800095c:	e000      	b.n	8000960 <fsm_button_processing+0x2f8>
			break;
 800095e:	bf00      	nop
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000012 	.word	0x20000012
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000000 	.word	0x20000000
 8000970:	20000004 	.word	0x20000004
 8000974:	20000008 	.word	0x20000008

08000978 <button_reading>:
// after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static uint16_t button_pins[N0_OF_BUTTONS] = {button_1_Pin, button_2_Pin, button_3_Pin};

void button_reading(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	e054      	b.n	8000a2e <button_reading+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000984:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <button_reading+0xc8>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <button_reading+0xcc>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	460a      	mov	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, button_pins[i]);
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <button_reading+0xd0>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099e:	4619      	mov	r1, r3
 80009a0:	482a      	ldr	r0, [pc, #168]	; (8000a4c <button_reading+0xd4>)
 80009a2:	f001 fa7d 	bl	8001ea0 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <button_reading+0xc8>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	460a      	mov	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <button_reading+0xc8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4921      	ldr	r1, [pc, #132]	; (8000a44 <button_reading+0xcc>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	440b      	add	r3, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d108      	bne.n	80009da <button_reading+0x62>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <button_reading+0xc8>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <button_reading+0xd8>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	460a      	mov	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80009da:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <button_reading+0xd8>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d116      	bne.n	8000a14 <button_reading+0x9c>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80009e6:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <button_reading+0xdc>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ee:	2b63      	cmp	r3, #99	; 0x63
 80009f0:	d80a      	bhi.n	8000a08 <button_reading+0x90>
				counterForButtonPress1s[i]++;
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <button_reading+0xdc>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b299      	uxth	r1, r3
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <button_reading+0xdc>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a06:	e00f      	b.n	8000a28 <button_reading+0xb0>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <button_reading+0xe0>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e009      	b.n	8000a28 <button_reading+0xb0>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <button_reading+0xdc>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <button_reading+0xe0>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	dda7      	ble.n	8000984 <button_reading+0xc>
		}
	}
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000064 	.word	0x20000064
 8000a44:	20000068 	.word	0x20000068
 8000a48:	20000014 	.word	0x20000014
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	20000060 	.word	0x20000060
 8000a54:	20000070 	.word	0x20000070
 8000a58:	2000006c 	.word	0x2000006c

08000a5c <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d901      	bls.n	8000a70 <is_button_pressed+0x14>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e007      	b.n	8000a80 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <is_button_pressed+0x30>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf0c      	ite	eq
 8000a7a:	2301      	moveq	r3, #1
 8000a7c:	2300      	movne	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000060 	.word	0x20000060

08000a90 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d901      	bls.n	8000aa4 <is_button_pressed_1s+0x14>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e007      	b.n	8000ab4 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <is_button_pressed_1s+0x30>)
 8000aa8:	5cd3      	ldrb	r3, [r2, r3]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	2000006c 	.word	0x2000006c

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 ff00 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f848 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 f8ce 	bl	8000c70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ad4:	f000 f880 	bl	8000bd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ad8:	4818      	ldr	r0, [pc, #96]	; (8000b3c <main+0x78>)
 8000ada:	f001 fe71 	bl	80027c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(timer_run, 0, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <main+0x7c>)
 8000ae4:	f000 f95e 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2100      	movs	r1, #0
 8000aec:	4815      	ldr	r0, [pc, #84]	; (8000b44 <main+0x80>)
 8000aee:	f000 f959 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2100      	movs	r1, #0
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <main+0x84>)
 8000af8:	f000 f954 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(fsm_red_manual, 0, 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2100      	movs	r1, #0
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <main+0x88>)
 8000b02:	f000 f94f 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(fsm_amber_manual, 0, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <main+0x8c>)
 8000b0c:	f000 f94a 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(fsm_green_manual, 0, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2100      	movs	r1, #0
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <main+0x90>)
 8000b16:	f000 f945 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(led_scan, 0, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <main+0x94>)
 8000b20:	f000 f940 	bl	8000da4 <SCH_Add_Task>
  SCH_Add_Task(fsm_button_processing, 0, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2100      	movs	r1, #0
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <main+0x98>)
 8000b2a:	f000 f93b 	bl	8000da4 <SCH_Add_Task>
  setTimer2(125);
 8000b2e:	207d      	movs	r0, #125	; 0x7d
 8000b30:	f000 fe08 	bl	8001744 <setTimer2>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b34:	f000 fb80 	bl	8001238 <SCH_Dispatch_Tasks>
 8000b38:	e7fc      	b.n	8000b34 <main+0x70>
 8000b3a:	bf00      	nop
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	080017ad 	.word	0x080017ad
 8000b44:	08000979 	.word	0x08000979
 8000b48:	0800014d 	.word	0x0800014d
 8000b4c:	080003bd 	.word	0x080003bd
 8000b50:	08000449 	.word	0x08000449
 8000b54:	080004d5 	.word	0x080004d5
 8000b58:	08001585 	.word	0x08001585
 8000b5c:	08000669 	.word	0x08000669

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b090      	sub	sp, #64	; 0x40
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	2228      	movs	r2, #40	; 0x28
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f9e2 	bl	8002f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f9e6 	bl	8001f68 <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f8d1 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fc52 	bl	8002468 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bca:	f000 f8bd 	bl	8000d48 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	; 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000bfe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c1e:	f001 fd7f 	bl	8002720 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c28:	f000 f88e 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c3a:	f001 ff15 	bl	8002a68 <HAL_TIM_ConfigClockSource>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c44:	f000 f880 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_TIM2_Init+0x94>)
 8000c56:	f002 f8e1 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f872 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000014c 	.word	0x2000014c

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <MX_GPIO_Init+0xbc>)
 8000cbc:	f001 f907 	bl	8001ece <HAL_GPIO_WritePin>
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red_1_Pin|amber_1_Pin|green_1_Pin|red_2_Pin
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000cc6:	481a      	ldr	r0, [pc, #104]	; (8000d30 <MX_GPIO_Init+0xc0>)
 8000cc8:	f001 f901 	bl	8001ece <HAL_GPIO_WritePin>
                          |amber_2_Pin|green_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ccc:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000cd0:	60bb      	str	r3, [r7, #8]
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_GPIO_Init+0xbc>)
 8000ce6:	f000 ff61 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin;
 8000cea:	2307      	movs	r3, #7
 8000cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_GPIO_Init+0xc0>)
 8000cfe:	f000 ff55 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : red_1_Pin amber_1_Pin green_1_Pin red_2_Pin
                           amber_2_Pin green_2_Pin */
  GPIO_InitStruct.Pin = red_1_Pin|amber_1_Pin|green_1_Pin|red_2_Pin
 8000d02:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000d06:	60bb      	str	r3, [r7, #8]
                          |amber_2_Pin|green_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2302      	movs	r3, #2
 8000d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_GPIO_Init+0xc0>)
 8000d1c:	f000 ff46 	bl	8001bac <HAL_GPIO_Init>

}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000d3c:	f000 f80a 	bl	8000d54 <SCH_Update>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <SCH_Update>:

static sTask SCH_tasks_G[SCH_MAX_TASKS];
static uint32_t newTaskID = 0;
static uint32_t count_SCH_Update = 0;

void SCH_Update(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <SCH_Update+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <SCH_Update+0x48>)
 8000d60:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <SCH_Update+0x4c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d013      	beq.n	8000d92 <SCH_Update+0x3e>
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <SCH_Update+0x4c>)
 8000d6c:	7b1b      	ldrb	r3, [r3, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <SCH_Update+0x4c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <SCH_Update+0x4c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <SCH_Update+0x4c>)
 8000d82:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SCH_Update+0x4c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SCH_Update+0x4c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2000011c 	.word	0x2000011c
 8000da0:	20000078 	.word	0x20000078

08000da4 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	77fb      	strb	r3, [r7, #31]
 8000dc0:	e133      	b.n	800102a <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8000dc2:	7ffa      	ldrb	r2, [r7, #31]
 8000dc4:	49a1      	ldr	r1, [pc, #644]	; (800104c <SCH_Add_Task+0x2a8>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f240 80c1 	bls.w	8000f66 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8000de4:	7ffa      	ldrb	r2, [r7, #31]
 8000de6:	4999      	ldr	r1, [pc, #612]	; (800104c <SCH_Add_Task+0x2a8>)
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	3304      	adds	r3, #4
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8000e00:	7ffa      	ldrb	r2, [r7, #31]
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	4890      	ldr	r0, [pc, #576]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4403      	add	r3, r0
 8000e14:	3304      	adds	r3, #4
 8000e16:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8000e18:	2307      	movs	r3, #7
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	e04c      	b.n	8000eb8 <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	1e59      	subs	r1, r3, #1
 8000e22:	7dfa      	ldrb	r2, [r7, #23]
 8000e24:	4889      	ldr	r0, [pc, #548]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e26:	460b      	mov	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4403      	add	r3, r0
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	4886      	ldr	r0, [pc, #536]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4403      	add	r3, r0
 8000e3e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	1e59      	subs	r1, r3, #1
 8000e44:	7dfa      	ldrb	r2, [r7, #23]
 8000e46:	4881      	ldr	r0, [pc, #516]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4403      	add	r3, r0
 8000e52:	3308      	adds	r3, #8
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	487d      	ldr	r0, [pc, #500]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4403      	add	r3, r0
 8000e62:	3308      	adds	r3, #8
 8000e64:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	1e59      	subs	r1, r3, #1
 8000e6a:	7dfa      	ldrb	r2, [r7, #23]
 8000e6c:	4877      	ldr	r0, [pc, #476]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e6e:	460b      	mov	r3, r1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4403      	add	r3, r0
 8000e78:	3304      	adds	r3, #4
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	4873      	ldr	r0, [pc, #460]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4403      	add	r3, r0
 8000e88:	3304      	adds	r3, #4
 8000e8a:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	1e59      	subs	r1, r3, #1
 8000e90:	7dfa      	ldrb	r2, [r7, #23]
 8000e92:	486e      	ldr	r0, [pc, #440]	; (800104c <SCH_Add_Task+0x2a8>)
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4403      	add	r3, r0
 8000e9e:	3310      	adds	r3, #16
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	486a      	ldr	r0, [pc, #424]	; (800104c <SCH_Add_Task+0x2a8>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4403      	add	r3, r0
 8000eae:	3310      	adds	r3, #16
 8000eb0:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	75fb      	strb	r3, [r7, #23]
 8000eb8:	7dfa      	ldrb	r2, [r7, #23]
 8000eba:	7ffb      	ldrb	r3, [r7, #31]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8ae      	bhi.n	8000e1e <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8000ec0:	7ffa      	ldrb	r2, [r7, #31]
 8000ec2:	4962      	ldr	r1, [pc, #392]	; (800104c <SCH_Add_Task+0x2a8>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8000ed2:	7ffa      	ldrb	r2, [r7, #31]
 8000ed4:	495d      	ldr	r1, [pc, #372]	; (800104c <SCH_Add_Task+0x2a8>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000ee6:	7ffa      	ldrb	r2, [r7, #31]
 8000ee8:	4958      	ldr	r1, [pc, #352]	; (800104c <SCH_Add_Task+0x2a8>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 8000efa:	7ffa      	ldrb	r2, [r7, #31]
 8000efc:	4953      	ldr	r1, [pc, #332]	; (800104c <SCH_Add_Task+0x2a8>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3304      	adds	r3, #4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10a      	bne.n	8000f26 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8000f10:	7ffa      	ldrb	r2, [r7, #31]
 8000f12:	494e      	ldr	r1, [pc, #312]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	330c      	adds	r3, #12
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e009      	b.n	8000f3a <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8000f26:	7ffa      	ldrb	r2, [r7, #31]
 8000f28:	4948      	ldr	r1, [pc, #288]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	330c      	adds	r3, #12
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8000f3a:	7ffc      	ldrb	r4, [r7, #31]
 8000f3c:	f000 f9a8 	bl	8001290 <Get_New_Task_ID>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4942      	ldr	r1, [pc, #264]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f44:	4623      	mov	r3, r4
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4423      	add	r3, r4
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3310      	adds	r3, #16
 8000f50:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8000f52:	7ffa      	ldrb	r2, [r7, #31]
 8000f54:	493d      	ldr	r1, [pc, #244]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3310      	adds	r3, #16
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	e06e      	b.n	8001044 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8000f66:	7ffa      	ldrb	r2, [r7, #31]
 8000f68:	4938      	ldr	r1, [pc, #224]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d154      	bne.n	8001024 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8000f7a:	7ffa      	ldrb	r2, [r7, #31]
 8000f7c:	4933      	ldr	r1, [pc, #204]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8000f8c:	7ffa      	ldrb	r2, [r7, #31]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	482d      	ldr	r0, [pc, #180]	; (800104c <SCH_Add_Task+0x2a8>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000fa4:	7ffa      	ldrb	r2, [r7, #31]
 8000fa6:	4929      	ldr	r1, [pc, #164]	; (800104c <SCH_Add_Task+0x2a8>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8000fb8:	7ffa      	ldrb	r2, [r7, #31]
 8000fba:	4924      	ldr	r1, [pc, #144]	; (800104c <SCH_Add_Task+0x2a8>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10a      	bne.n	8000fe4 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8000fce:	7ffa      	ldrb	r2, [r7, #31]
 8000fd0:	491e      	ldr	r1, [pc, #120]	; (800104c <SCH_Add_Task+0x2a8>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e009      	b.n	8000ff8 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8000fe4:	7ffa      	ldrb	r2, [r7, #31]
 8000fe6:	4919      	ldr	r1, [pc, #100]	; (800104c <SCH_Add_Task+0x2a8>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	330c      	adds	r3, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8000ff8:	7ffc      	ldrb	r4, [r7, #31]
 8000ffa:	f000 f949 	bl	8001290 <Get_New_Task_ID>
 8000ffe:	4602      	mov	r2, r0
 8001000:	4912      	ldr	r1, [pc, #72]	; (800104c <SCH_Add_Task+0x2a8>)
 8001002:	4623      	mov	r3, r4
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4423      	add	r3, r4
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3310      	adds	r3, #16
 800100e:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8001010:	7ffa      	ldrb	r2, [r7, #31]
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <SCH_Add_Task+0x2a8>)
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3310      	adds	r3, #16
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e00f      	b.n	8001044 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	3301      	adds	r3, #1
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	2b07      	cmp	r3, #7
 800102e:	f67f aec8 	bls.w	8000dc2 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001032:	7ffa      	ldrb	r2, [r7, #31]
 8001034:	4905      	ldr	r1, [pc, #20]	; (800104c <SCH_Add_Task+0x2a8>)
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3310      	adds	r3, #16
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}
 800104c:	20000078 	.word	0x20000078

08001050 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80e2 	beq.w	8001228 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e0da      	b.n	8001220 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4971      	ldr	r1, [pc, #452]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3310      	adds	r3, #16
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	f040 80cb 	bne.w	800121a <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d02b      	beq.n	80010e6 <SCH_Delete_Task+0x96>
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b06      	cmp	r3, #6
 8001092:	d828      	bhi.n	80010e6 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	4966      	ldr	r1, [pc, #408]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01d      	beq.n	80010e6 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	4961      	ldr	r1, [pc, #388]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3304      	adds	r3, #4
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	485c      	ldr	r0, [pc, #368]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	3304      	adds	r3, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	3201      	adds	r2, #1
 80010d4:	4419      	add	r1, r3
 80010d6:	4857      	ldr	r0, [pc, #348]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4403      	add	r3, r0
 80010e2:	3304      	adds	r3, #4
 80010e4:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	73bb      	strb	r3, [r7, #14]
 80010ea:	e060      	b.n	80011ae <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	7bba      	ldrb	r2, [r7, #14]
 80010f2:	4850      	ldr	r0, [pc, #320]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4403      	add	r3, r0
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	484c      	ldr	r0, [pc, #304]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4403      	add	r3, r0
 800110c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	1c59      	adds	r1, r3, #1
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	4847      	ldr	r0, [pc, #284]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001116:	460b      	mov	r3, r1
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4403      	add	r3, r0
 8001120:	3308      	adds	r3, #8
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	4843      	ldr	r0, [pc, #268]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4403      	add	r3, r0
 8001130:	3308      	adds	r3, #8
 8001132:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	1c59      	adds	r1, r3, #1
 8001138:	7bba      	ldrb	r2, [r7, #14]
 800113a:	483e      	ldr	r0, [pc, #248]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4403      	add	r3, r0
 8001146:	3304      	adds	r3, #4
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	483a      	ldr	r0, [pc, #232]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4403      	add	r3, r0
 8001156:	3304      	adds	r3, #4
 8001158:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	7bba      	ldrb	r2, [r7, #14]
 8001160:	4834      	ldr	r0, [pc, #208]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001162:	460b      	mov	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4403      	add	r3, r0
 800116c:	330c      	adds	r3, #12
 800116e:	7818      	ldrb	r0, [r3, #0]
 8001170:	4930      	ldr	r1, [pc, #192]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	330c      	adds	r3, #12
 800117e:	4602      	mov	r2, r0
 8001180:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	7bba      	ldrb	r2, [r7, #14]
 8001188:	482a      	ldr	r0, [pc, #168]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800118a:	460b      	mov	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4403      	add	r3, r0
 8001194:	3310      	adds	r3, #16
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	4826      	ldr	r0, [pc, #152]	; (8001234 <SCH_Delete_Task+0x1e4>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	3310      	adds	r3, #16
 80011a6:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73bb      	strb	r3, [r7, #14]
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d99b      	bls.n	80010ec <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80011b4:	7bba      	ldrb	r2, [r7, #14]
 80011b6:	491f      	ldr	r1, [pc, #124]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80011c6:	7bba      	ldrb	r2, [r7, #14]
 80011c8:	491a      	ldr	r1, [pc, #104]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	3308      	adds	r3, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80011da:	7bba      	ldrb	r2, [r7, #14]
 80011dc:	4915      	ldr	r1, [pc, #84]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	3304      	adds	r3, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 80011ee:	7bba      	ldrb	r2, [r7, #14]
 80011f0:	4910      	ldr	r1, [pc, #64]	; (8001234 <SCH_Delete_Task+0x1e4>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	330c      	adds	r3, #12
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001202:	7bba      	ldrb	r2, [r7, #14]
 8001204:	490b      	ldr	r1, [pc, #44]	; (8001234 <SCH_Delete_Task+0x1e4>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	e007      	b.n	800122a <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b07      	cmp	r3, #7
 8001224:	f67f af21 	bls.w	800106a <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8001228:	7b7b      	ldrb	r3, [r7, #13]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000078 	.word	0x20000078

08001238 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <SCH_Dispatch_Tasks+0x54>)
 8001240:	7b1b      	ldrb	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d019      	beq.n	800127a <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <SCH_Dispatch_Tasks+0x54>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <SCH_Dispatch_Tasks+0x54>)
 800124e:	2200      	movs	r2, #0
 8001250:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <SCH_Dispatch_Tasks+0x54>)
 8001254:	1d3c      	adds	r4, r7, #4
 8001256:	461d      	mov	r5, r3
 8001258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fef4 	bl	8001050 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68f9      	ldr	r1, [r7, #12]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd95 	bl	8000da4 <SCH_Add_Task>
		}
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800127a:	2101      	movs	r1, #1
 800127c:	2000      	movs	r0, #0
 800127e:	f000 fe57 	bl	8001f30 <HAL_PWR_EnterSLEEPMode>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	20000078 	.word	0x20000078

08001290 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	newTaskID++;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <Get_New_Task_ID+0x2c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <Get_New_Task_ID+0x2c>)
 800129c:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <Get_New_Task_ID+0x2c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <Get_New_Task_ID+0x20>
		newTaskID++;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <Get_New_Task_ID+0x2c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <Get_New_Task_ID+0x2c>)
 80012ae:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <Get_New_Task_ID+0x2c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000118 	.word	0x20000118

080012c0 <display7SEG>:
#include "main.h"
#include "timer.h"

int seven_seg_buffer[4] = {8, 8, 8, 8};

void display7SEG(int num) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b09      	cmp	r3, #9
 80012cc:	f200 8091 	bhi.w	80013f2 <display7SEG+0x132>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <display7SEG+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	08001301 	.word	0x08001301
 80012dc:	0800131b 	.word	0x0800131b
 80012e0:	08001333 	.word	0x08001333
 80012e4:	0800134d 	.word	0x0800134d
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001381 	.word	0x08001381
 80012f0:	0800139b 	.word	0x0800139b
 80012f4:	080013b3 	.word	0x080013b3
 80012f8:	080013cb 	.word	0x080013cb
 80012fc:	080013d9 	.word	0x080013d9
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001306:	4840      	ldr	r0, [pc, #256]	; (8001408 <display7SEG+0x148>)
 8001308:	f000 fde1 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001312:	483d      	ldr	r0, [pc, #244]	; (8001408 <display7SEG+0x148>)
 8001314:	f000 fddb 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8001318:	e072      	b.n	8001400 <display7SEG+0x140>
		case 1:
			HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	21c0      	movs	r1, #192	; 0xc0
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <display7SEG+0x148>)
 8001320:	f000 fdd5 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 800132a:	4837      	ldr	r0, [pc, #220]	; (8001408 <display7SEG+0x148>)
 800132c:	f000 fdcf 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8001330:	e066      	b.n	8001400 <display7SEG+0x140>
		case 2:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | d_Pin | e_Pin | g_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8001338:	4833      	ldr	r0, [pc, #204]	; (8001408 <display7SEG+0x148>)
 800133a:	f000 fdc8 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin | f_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001344:	4830      	ldr	r0, [pc, #192]	; (8001408 <display7SEG+0x148>)
 8001346:	f000 fdc2 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 800134a:	e059      	b.n	8001400 <display7SEG+0x140>
		case 3:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | g_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8001352:	482d      	ldr	r0, [pc, #180]	; (8001408 <display7SEG+0x148>)
 8001354:	f000 fdbb 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin | f_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800135e:	482a      	ldr	r0, [pc, #168]	; (8001408 <display7SEG+0x148>)
 8001360:	f000 fdb5 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8001364:	e04c      	b.n	8001400 <display7SEG+0x140>
		case 4:
			HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 800136c:	4826      	ldr	r0, [pc, #152]	; (8001408 <display7SEG+0x148>)
 800136e:	f000 fdae 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001378:	4823      	ldr	r0, [pc, #140]	; (8001408 <display7SEG+0x148>)
 800137a:	f000 fda8 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 800137e:	e03f      	b.n	8001400 <display7SEG+0x140>
		case 5:
			HAL_GPIO_WritePin(GPIOA, a_Pin | c_Pin | d_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001386:	4820      	ldr	r0, [pc, #128]	; (8001408 <display7SEG+0x148>)
 8001388:	f000 fda1 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin | e_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001392:	481d      	ldr	r0, [pc, #116]	; (8001408 <display7SEG+0x148>)
 8001394:	f000 fd9b 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 8001398:	e032      	b.n	8001400 <display7SEG+0x140>
		case 6:
			HAL_GPIO_WritePin(GPIOA, a_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80013a0:	4819      	ldr	r0, [pc, #100]	; (8001408 <display7SEG+0x148>)
 80013a2:	f000 fd94 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <display7SEG+0x148>)
 80013ac:	f000 fd8f 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80013b0:	e026      	b.n	8001400 <display7SEG+0x140>
		case 7:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	21e0      	movs	r1, #224	; 0xe0
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <display7SEG+0x148>)
 80013b8:	f000 fd89 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <display7SEG+0x148>)
 80013c4:	f000 fd83 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80013c8:	e01a      	b.n	8001400 <display7SEG+0x140>
		case 8:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <display7SEG+0x148>)
 80013d2:	f000 fd7c 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80013d6:	e013      	b.n	8001400 <display7SEG+0x140>
		case 9:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <display7SEG+0x148>)
 80013e0:	f000 fd75 	bl	8001ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <display7SEG+0x148>)
 80013ec:	f000 fd6f 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80013f0:	e006      	b.n	8001400 <display7SEG+0x140>
		default:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <display7SEG+0x148>)
 80013fa:	f000 fd68 	bl	8001ece <HAL_GPIO_WritePin>
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010800 	.word	0x40010800

0800140c <update7SEG>:

void update7SEG(int index) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d84a      	bhi.n	80014b0 <update7SEG+0xa4>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <update7SEG+0x14>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	08001451 	.word	0x08001451
 8001428:	08001471 	.word	0x08001471
 800142c:	08001491 	.word	0x08001491
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8001430:	2201      	movs	r2, #1
 8001432:	211c      	movs	r1, #28
 8001434:	4823      	ldr	r0, [pc, #140]	; (80014c4 <update7SEG+0xb8>)
 8001436:	f000 fd4a 	bl	8001ece <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[0]);
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <update7SEG+0xbc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff3e 	bl	80012c0 <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2102      	movs	r1, #2
 8001448:	481e      	ldr	r0, [pc, #120]	; (80014c4 <update7SEG+0xb8>)
 800144a:	f000 fd40 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 800144e:	e035      	b.n	80014bc <update7SEG+0xb0>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8001450:	2201      	movs	r2, #1
 8001452:	211a      	movs	r1, #26
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <update7SEG+0xb8>)
 8001456:	f000 fd3a 	bl	8001ece <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[1]);
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <update7SEG+0xbc>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff2e 	bl	80012c0 <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2104      	movs	r1, #4
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <update7SEG+0xb8>)
 800146a:	f000 fd30 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 800146e:	e025      	b.n	80014bc <update7SEG+0xb0>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2116      	movs	r1, #22
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <update7SEG+0xb8>)
 8001476:	f000 fd2a 	bl	8001ece <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[2]);
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <update7SEG+0xbc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff1e 	bl	80012c0 <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2108      	movs	r1, #8
 8001488:	480e      	ldr	r0, [pc, #56]	; (80014c4 <update7SEG+0xb8>)
 800148a:	f000 fd20 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 800148e:	e015      	b.n	80014bc <update7SEG+0xb0>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8001490:	2201      	movs	r2, #1
 8001492:	210e      	movs	r1, #14
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <update7SEG+0xb8>)
 8001496:	f000 fd1a 	bl	8001ece <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[3]);
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <update7SEG+0xbc>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff0e 	bl	80012c0 <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2110      	movs	r1, #16
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <update7SEG+0xb8>)
 80014aa:	f000 fd10 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80014ae:	e005      	b.n	80014bc <update7SEG+0xb0>
		default:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	211e      	movs	r1, #30
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <update7SEG+0xb8>)
 80014b6:	f000 fd0a 	bl	8001ece <HAL_GPIO_WritePin>
			break;
 80014ba:	bf00      	nop
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010800 	.word	0x40010800
 80014c8:	2000001c 	.word	0x2000001c

080014cc <update7SEG_buffer_auto>:


void update7SEG_buffer_auto(int duration_1, int duration_2) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	seven_seg_buffer[0] = duration_1/10;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <update7SEG_buffer_auto+0x60>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	1092      	asrs	r2, r2, #2
 80014e0:	17db      	asrs	r3, r3, #31
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <update7SEG_buffer_auto+0x64>)
 80014e6:	6013      	str	r3, [r2, #0]
	seven_seg_buffer[1] = duration_1 - seven_seg_buffer[0]*10;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <update7SEG_buffer_auto+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0209 	mvn.w	r2, #9
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <update7SEG_buffer_auto+0x64>)
 80014fa:	6053      	str	r3, [r2, #4]
	seven_seg_buffer[2] = duration_2/10;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <update7SEG_buffer_auto+0x60>)
 8001500:	fb82 1203 	smull	r1, r2, r2, r3
 8001504:	1092      	asrs	r2, r2, #2
 8001506:	17db      	asrs	r3, r3, #31
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <update7SEG_buffer_auto+0x64>)
 800150c:	6093      	str	r3, [r2, #8]
	seven_seg_buffer[3] = duration_2 - seven_seg_buffer[2]*10;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <update7SEG_buffer_auto+0x64>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f06f 0209 	mvn.w	r2, #9
 8001516:	fb02 f203 	mul.w	r2, r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <update7SEG_buffer_auto+0x64>)
 8001520:	60d3      	str	r3, [r2, #12]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	66666667 	.word	0x66666667
 8001530:	2000001c 	.word	0x2000001c

08001534 <update7SEG_buffer_manual>:

void update7SEG_buffer_manual(int mode, int duration) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	seven_seg_buffer[0] = 0;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <update7SEG_buffer_manual+0x48>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	seven_seg_buffer[1] = mode;
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <update7SEG_buffer_manual+0x48>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6053      	str	r3, [r2, #4]
	seven_seg_buffer[2] = duration/10;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <update7SEG_buffer_manual+0x4c>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1092      	asrs	r2, r2, #2
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <update7SEG_buffer_manual+0x48>)
 800155a:	6093      	str	r3, [r2, #8]
	seven_seg_buffer[3] = duration - seven_seg_buffer[2]*10;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <update7SEG_buffer_manual+0x48>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f06f 0209 	mvn.w	r2, #9
 8001564:	fb02 f203 	mul.w	r2, r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <update7SEG_buffer_manual+0x48>)
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000001c 	.word	0x2000001c
 8001580:	66666667 	.word	0x66666667

08001584 <led_scan>:

int index_led = 0;
void led_scan() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <led_scan+0x34>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d111      	bne.n	80015b4 <led_scan+0x30>
	  update7SEG(index_led++);
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <led_scan+0x38>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	4909      	ldr	r1, [pc, #36]	; (80015bc <led_scan+0x38>)
 8001598:	600a      	str	r2, [r1, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff36 	bl	800140c <update7SEG>
	  if (index_led >= 4) index_led = 0;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <led_scan+0x38>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	dd02      	ble.n	80015ae <led_scan+0x2a>
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <led_scan+0x38>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
	  setTimer2(125);
 80015ae:	207d      	movs	r0, #125	; 0x7d
 80015b0:	f000 f8c8 	bl	8001744 <setTimer2>
	}
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000140 	.word	0x20000140
 80015bc:	20000120 	.word	0x20000120

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_MspInit+0x5c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x5c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_MspInit+0x60>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_MspInit+0x60>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d113      	bne.n	800165e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201c      	movs	r0, #28
 8001654:	f000 fa73 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001658:	201c      	movs	r0, #28
 800165a:	f000 fa8c 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 f951 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <TIM2_IRQHandler+0x10>)
 80016c2:	f001 f8c9 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000014c 	.word	0x2000014c

080016d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <setTimer0>:

int TIMER_CYCLE = 10;
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter = 0;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0;;

void setTimer0(int duration) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <setTimer0+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <setTimer0+0x2c>)
 80016f0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <setTimer0+0x30>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000030 	.word	0x20000030
 8001708:	20000124 	.word	0x20000124
 800170c:	20000138 	.word	0x20000138

08001710 <setTimer1>:

void setTimer1(int duration) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <setTimer1+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <setTimer1+0x2c>)
 8001724:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <setTimer1+0x30>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000030 	.word	0x20000030
 800173c:	20000128 	.word	0x20000128
 8001740:	2000013c 	.word	0x2000013c

08001744 <setTimer2>:

void setTimer2(int duration) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <setTimer2+0x28>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	fb92 f3f3 	sdiv	r3, r2, r3
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <setTimer2+0x2c>)
 8001758:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <setTimer2+0x30>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000030 	.word	0x20000030
 8001770:	2000012c 	.word	0x2000012c
 8001774:	20000140 	.word	0x20000140

08001778 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <setTimer4+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	fb92 f3f3 	sdiv	r3, r2, r3
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <setTimer4+0x2c>)
 800178c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <setTimer4+0x30>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000030 	.word	0x20000030
 80017a4:	20000134 	.word	0x20000134
 80017a8:	20000148 	.word	0x20000148

080017ac <timer_run>:

void timer_run() {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <timer_run+0xac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd0b      	ble.n	80017d0 <timer_run+0x24>
		timer0_counter--;
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <timer_run+0xac>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a26      	ldr	r2, [pc, #152]	; (8001858 <timer_run+0xac>)
 80017c0:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <timer_run+0xac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <timer_run+0x24>
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <timer_run+0xb0>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <timer_run+0xb4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0b      	ble.n	80017f0 <timer_run+0x44>
		timer1_counter--;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <timer_run+0xb4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <timer_run+0xb4>)
 80017e0:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <timer_run+0xb4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <timer_run+0x44>
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <timer_run+0xb8>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <timer_run+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0b      	ble.n	8001810 <timer_run+0x64>
		timer2_counter--;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <timer_run+0xbc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <timer_run+0xbc>)
 8001800:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <timer_run+0xbc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <timer_run+0x64>
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <timer_run+0xc0>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <timer_run+0xc4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timer_run+0x84>
		timer3_counter--;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <timer_run+0xc4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <timer_run+0xc4>)
 8001820:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <timer_run+0xc4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <timer_run+0x84>
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <timer_run+0xc8>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <timer_run+0xcc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd0b      	ble.n	8001850 <timer_run+0xa4>
		timer4_counter--;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <timer_run+0xcc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <timer_run+0xcc>)
 8001840:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <timer_run+0xcc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <timer_run+0xa4>
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <timer_run+0xd0>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000124 	.word	0x20000124
 800185c:	20000138 	.word	0x20000138
 8001860:	20000128 	.word	0x20000128
 8001864:	2000013c 	.word	0x2000013c
 8001868:	2000012c 	.word	0x2000012c
 800186c:	20000140 	.word	0x20000140
 8001870:	20000130 	.word	0x20000130
 8001874:	20000144 	.word	0x20000144
 8001878:	20000134 	.word	0x20000134
 800187c:	20000148 	.word	0x20000148

08001880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001880:	f7ff ff26 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001886:	490c      	ldr	r1, [pc, #48]	; (80018b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800189c:	4c09      	ldr	r4, [pc, #36]	; (80018c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f001 fb21 	bl	8002ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f7ff f909 	bl	8000ac4 <main>
  bx lr
 80018b2:	4770      	bx	lr
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80018bc:	08002f8c 	.word	0x08002f8c
  ldr r2, =_sbss
 80018c0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80018c4:	20000198 	.word	0x20000198

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f923 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fe6a 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f93b 	bl	8001b92 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f903 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000002c 	.word	0x2000002c
 8001950:	20000038 	.word	0x20000038
 8001954:	20000034 	.word	0x20000034

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x1c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x20>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x20>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000038 	.word	0x20000038
 8001978:	20000194 	.word	0x20000194

0800197c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_GetTick+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000194 	.word	0x20000194

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff90 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff2d 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff42 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff35 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e148      	b.n	8001e52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8137 	bne.w	8001e4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4aa3      	ldr	r2, [pc, #652]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d05e      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001be8:	4aa1      	ldr	r2, [pc, #644]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d875      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bee:	4aa1      	ldr	r2, [pc, #644]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d058      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a9f      	ldr	r2, [pc, #636]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d86f      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bfa:	4a9f      	ldr	r2, [pc, #636]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d052      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c00:	4a9d      	ldr	r2, [pc, #628]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d869      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c06:	4a9d      	ldr	r2, [pc, #628]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a9b      	ldr	r2, [pc, #620]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d863      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c12:	4a9b      	ldr	r2, [pc, #620]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d046      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a99      	ldr	r2, [pc, #612]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d85d      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d82a      	bhi.n	8001c78 <HAL_GPIO_Init+0xcc>
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d859      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_GPIO_Init+0x80>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c93 	.word	0x08001c93
 8001c38:	08001cd5 	.word	0x08001cd5
 8001c3c:	08001cdb 	.word	0x08001cdb
 8001c40:	08001cdb 	.word	0x08001cdb
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001cdb 	.word	0x08001cdb
 8001c4c:	08001cdb 	.word	0x08001cdb
 8001c50:	08001cdb 	.word	0x08001cdb
 8001c54:	08001cdb 	.word	0x08001cdb
 8001c58:	08001cdb 	.word	0x08001cdb
 8001c5c:	08001cdb 	.word	0x08001cdb
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cdb 	.word	0x08001cdb
 8001c68:	08001cdb 	.word	0x08001cdb
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c9d 	.word	0x08001c9d
 8001c78:	4a82      	ldr	r2, [pc, #520]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7e:	e02c      	b.n	8001cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e029      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e024      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	3308      	adds	r3, #8
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e01f      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e01a      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	623b      	str	r3, [r7, #32]
          break;
 8001cb2:	e013      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	611a      	str	r2, [r3, #16]
          break;
 8001cc6:	e009      	b.n	8001cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	615a      	str	r2, [r3, #20]
          break;
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          break;
 8001cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d801      	bhi.n	8001ce6 <HAL_GPIO_Init+0x13a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_Init+0x13e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_GPIO_Init+0x14c>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x152>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3b08      	subs	r3, #8
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	210f      	movs	r1, #15
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6a39      	ldr	r1, [r7, #32]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8090 	beq.w	8001e4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2c:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a55      	ldr	r2, [pc, #340]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d44:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x2e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2e8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1dc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2ec>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1d8>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9e:	493b      	ldr	r1, [pc, #236]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4937      	ldr	r1, [pc, #220]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4933      	ldr	r1, [pc, #204]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	492d      	ldr	r1, [pc, #180]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4929      	ldr	r1, [pc, #164]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4923      	ldr	r1, [pc, #140]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491f      	ldr	r1, [pc, #124]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4919      	ldr	r1, [pc, #100]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4915      	ldr	r1, [pc, #84]	; (8001e9c <HAL_GPIO_Init+0x2f0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f aeaf 	bne.w	8001bc0 <HAL_GPIO_Init+0x14>
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	372c      	adds	r7, #44	; 0x2c
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10310000 	.word	0x10310000
 8001e78:	10220000 	.word	0x10220000
 8001e7c:	10210000 	.word	0x10210000
 8001e80:	10120000 	.word	0x10120000
 8001e84:	10110000 	.word	0x10110000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ede:	787b      	ldrb	r3, [r7, #1]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eea:	e003      	b.n	8001ef4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	041a      	lsls	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	400b      	ands	r3, r1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f4e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001f50:	e002      	b.n	8001f58 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001f52:	bf40      	sev
    __WFE();
 8001f54:	bf20      	wfe
    __WFE();
 8001f56:	bf20      	wfe
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e26c      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00c      	beq.n	8001fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d112      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d06c      	beq.n	8002094 <HAL_RCC_OscConfig+0x12c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e246      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x76>
 8001fd0:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xbc>
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002024:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fc9a 	bl	800197c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc96 	bl	800197c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1fa      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xe4>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fc86 	bl	800197c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fc82 	bl	800197c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1e6      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x10c>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1ba      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4939      	ldr	r1, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff fc3b 	bl	800197c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff fc37 	bl	800197c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e19b      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fc1a 	bl	800197c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff fc16 	bl	800197c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e17a      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03a      	beq.n	80021ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7ff fbfa 	bl	800197c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff fbf6 	bl	800197c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e15a      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fa9a 	bl	80026e4 <RCC_Delay>
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7ff fbe0 	bl	800197c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff fbdc 	bl	800197c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d908      	bls.n	80021e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e140      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b9e      	ldr	r3, [pc, #632]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b97      	ldr	r3, [pc, #604]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b94      	ldr	r3, [pc, #592]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a93      	ldr	r2, [pc, #588]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b8e      	ldr	r3, [pc, #568]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8a      	ldr	r2, [pc, #552]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7ff fb9d 	bl	800197c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7ff fb99 	bl	800197c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0fd      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b81      	ldr	r3, [pc, #516]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 800226c:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x334>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a72      	ldr	r2, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e01c      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x356>
 80022a4:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a63      	ldr	r2, [pc, #396]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff fb4d 	bl	800197c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff fb49 	bl	800197c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0ab      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCC_OscConfig+0x37e>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7ff fb37 	bl	800197c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7ff fb33 	bl	800197c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e095      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b48      	ldr	r3, [pc, #288]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8081 	beq.w	8002452 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d061      	beq.n	8002420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d146      	bne.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff fb07 	bl	800197c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fb03 	bl	800197c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e067      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	492d      	ldr	r1, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	430b      	orrs	r3, r1
 80023be:	4927      	ldr	r1, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fad7 	bl	800197c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff fad3 	bl	800197c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e037      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
 80023f0:	e02f      	b.n	8002452 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fac0 	bl	800197c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff fabc 	bl	800197c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e020      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x498>
 800241e:	e018      	b.n	8002452 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e013      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	429a      	cmp	r2, r3
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	42420060 	.word	0x42420060

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4965      	ldr	r1, [pc, #404]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d040      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e073      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4936      	ldr	r1, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7ff fa10 	bl	800197c <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7ff fa0c 	bl	800197c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e053      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f821 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f96e 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08002f60 	.word	0x08002f60
 8002634:	2000002c 	.word	0x2000002c
 8002638:	20000034 	.word	0x20000034

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x36>
 800266a:	e027      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e027      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	fb02 f203 	mul.w	r2, r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	693b      	ldr	r3, [r7, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	08002f70 	.word	0x08002f70
 80026dc:	08002f80 	.word	0x08002f80
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	2000002c 	.word	0x2000002c
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe ff6c 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fa6e 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e035      	b.n	8002844 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_TIM_Base_Start_IT+0x90>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d004      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_TIM_Base_Start_IT+0x94>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d010      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002830:	e007      	b.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0202 	mvn.w	r2, #2
 8002884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9b4 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9a7 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9b6 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f98a 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f97d 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f98c 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0208 	mvn.w	r2, #8
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f960 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f953 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f962 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2208      	movs	r2, #8
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f936 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f929 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f938 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f9ac 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d107      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa6b 	bl	8002ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d107      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8fc 	bl	8002c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0220 	mvn.w	r2, #32
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa36 	bl	8002ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x1c>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0b4      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x186>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abc:	d03e      	beq.n	8002b3c <HAL_TIM_ConfigClockSource+0xd4>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	f200 8087 	bhi.w	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	f000 8086 	beq.w	8002bda <HAL_TIM_ConfigClockSource+0x172>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d87f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d01a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xa6>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d87b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d050      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x11a>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d877      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d03c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xfa>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d873      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d058      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d86f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d064      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d86b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d060      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d867      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d05a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b0c:	e062      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f000 f95e 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
      break;
 8002b3a:	e04f      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f000 f947 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5e:	609a      	str	r2, [r3, #8]
      break;
 8002b60:	e03c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 f8be 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2150      	movs	r1, #80	; 0x50
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f915 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b80:	e02c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 f8dc 	bl	8002d4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2160      	movs	r1, #96	; 0x60
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f905 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e01c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 f89e 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2140      	movs	r1, #64	; 0x40
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f8f5 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e00c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 f8ec 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bd2:	e003      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e000      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
	...

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0x28>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x28>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <TIM_Base_SetConfig+0xac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x52>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x52>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <TIM_Base_SetConfig+0xac>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e041      	b.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d004      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400

08002ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <__libc_init_array>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	4d0c      	ldr	r5, [pc, #48]	; (8002f28 <__libc_init_array+0x38>)
 8002ef6:	4c0d      	ldr	r4, [pc, #52]	; (8002f2c <__libc_init_array+0x3c>)
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	42a6      	cmp	r6, r4
 8002efe:	d109      	bne.n	8002f14 <__libc_init_array+0x24>
 8002f00:	f000 f822 	bl	8002f48 <_init>
 8002f04:	2600      	movs	r6, #0
 8002f06:	4d0a      	ldr	r5, [pc, #40]	; (8002f30 <__libc_init_array+0x40>)
 8002f08:	4c0a      	ldr	r4, [pc, #40]	; (8002f34 <__libc_init_array+0x44>)
 8002f0a:	1b64      	subs	r4, r4, r5
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	42a6      	cmp	r6, r4
 8002f10:	d105      	bne.n	8002f1e <__libc_init_array+0x2e>
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
 8002f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f18:	4798      	blx	r3
 8002f1a:	3601      	adds	r6, #1
 8002f1c:	e7ee      	b.n	8002efc <__libc_init_array+0xc>
 8002f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f22:	4798      	blx	r3
 8002f24:	3601      	adds	r6, #1
 8002f26:	e7f2      	b.n	8002f0e <__libc_init_array+0x1e>
 8002f28:	08002f84 	.word	0x08002f84
 8002f2c:	08002f84 	.word	0x08002f84
 8002f30:	08002f84 	.word	0x08002f84
 8002f34:	08002f88 	.word	0x08002f88

08002f38 <memset>:
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4402      	add	r2, r0
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <memset+0xa>
 8002f40:	4770      	bx	lr
 8002f42:	f803 1b01 	strb.w	r1, [r3], #1
 8002f46:	e7f9      	b.n	8002f3c <memset+0x4>

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
